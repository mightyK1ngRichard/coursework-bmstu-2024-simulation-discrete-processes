//
//  DatabaseServer.swift
//  MulticoreDatabase
//
//  Created by Dmitriy Permyakov on 17.12.2024.
//

import Foundation

actor DatabaseServer {
    private(set) var queueLengths: [(date: String, Int)] = []
    private(set) var completedLog: [Agent] = []
    private(set) var activeReaders = 0
    private(set) var isWriting = false

    private var currentQueueLength = 0
    private let readerSemaphore: DispatchSemaphore
    private let writerSemaphore: DispatchSemaphore
    private var writerIsWaiting = false
    private var semaphorePausedReadAgents: Set<Agent> = []

    init(capacity: Int) {
        readerSemaphore = DispatchSemaphore(value: capacity)
        writerSemaphore = DispatchSemaphore(value: 1)
    }

    func reset() {
        queueLengths.removeAll()
        completedLog.removeAll()
        semaphorePausedReadAgents.removeAll()
    }

    func processRequest(agent: Agent) async {
        print(agent.startWork)
        let timeout = agent.operation == .read ? Constants.readTime : Constants.writeTime
        try? await Task.sleep(for: .seconds(timeout))
        print(agent.endWork(date: Date()))

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        var completedAgent = agent
        completedAgent.finishTime = Date()
        completedLog.append(completedAgent)
    }

    func addToQueue(agent: Agent) async {
        currentQueueLength += 1
        queueLengths.append((Date().currentTime, currentQueueLength))

        if agent.operation == .write {
            await handleWrite(agent: agent)
        } else {
            await handleRead(agent: agent)
        }

        currentQueueLength -= 1
        queueLengths.append((Date().currentTime, currentQueueLength))
    }

    private func handleWrite(agent: Agent) async {
        writerIsWaiting = true
        while activeReaders > 0 || !semaphorePausedReadAgents.isEmpty {
            print("[\(Date().currentTime)] ‚úçÔ∏è ‚è∏Ô∏è –ê–≥–µ–Ω—Ç #\(agent.id) –∂–¥—ë—Ç –∑–∞–ø–∏—Å–∏")
            try? await Task.sleep(for: .seconds(1))
        }
        writerIsWaiting = false

        while writerSemaphore.wait(timeout: .now() + 1) == .timedOut {
            print("[\(Date().currentTime)] üëÄ ‚öôÔ∏è –ê–≥–µ–Ω—Ç #\(agent.id) –Ω–µ —Ö–≤–∞—Ç–∏–ª–∞ –ø–æ—Ç–æ–∫–∞. –ñ–¥—ë—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è")
            try? await Task.sleep(for: .seconds(Constants.pauseTime))
        }

        isWriting = true
        print("[\(Date().currentTime)] üîê –ê–≥–µ–Ω—Ç #\(agent.id) –ë–ª–æ–∫–∏—Ä—É–µ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ üîê")

        await processRequest(agent: agent)

        isWriting = false
        writerSemaphore.signal()
        print("[\(Date().currentTime)] üîì –ê–≥–µ–Ω—Ç #\(agent.id) –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª üîì")
    }

    private func handleRead(agent: Agent) async {
        while isWriting || writerIsWaiting {
            print("[\(Date().currentTime)] üëÄ ‚è∏Ô∏è –ê–≥–µ–Ω—Ç #\(agent.id) –∂–¥—ë—Ç –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —á—Ç–µ–Ω–∏–µ")
            try? await Task.sleep(for: .seconds(Constants.pauseTime))
        }

        while readerSemaphore.wait(timeout: .now() + 0.5) == .timedOut {
            semaphorePausedReadAgents.insert(agent)
            print("[\(Date().currentTime)] üëÄ ‚öôÔ∏è –ê–≥–µ–Ω—Ç #\(agent.id) –Ω–µ —Ö–≤–∞—Ç–∏–ª–∞ –ø–æ—Ç–æ–∫–∞. –ñ–¥—ë—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è")
            try? await Task.sleep(for: .seconds(Constants.pauseTime))
        }

        // –£–¥–∞–ª—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –µ—Å–ª–∏ –æ–Ω–∞ —Ç–∞–º –µ—Å—Ç—å
        if let index = semaphorePausedReadAgents.firstIndex(where: { $0.id == agent.id }) {
            print("[\(Date().currentTime)] üëÄ ‚öôÔ∏è –ê–≥–µ–Ω—Ç #\(agent.id) –£–î–ê–õ√ã–ù–ê –∏–∑ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö")
            semaphorePausedReadAgents.remove(at: index)
        }
        activeReaders += 1
        print("[\(Date().currentTime)] üëÄ ‚ûï –ê–≥–µ–Ω—Ç #\(agent.id) –∑–∞—Ö–≤–∞—Ç–∏–ª –æ—á–µ—Ä–µ–¥—å. (–≤—Å–µ–≥–æ: \(activeReaders))")

        await processRequest(agent: agent)
        activeReaders -= 1

        readerSemaphore.signal()
        print("[\(Date().currentTime)] üëÄ ‚ûñ –ê–≥–µ–Ω—Ç #\(agent.id) –æ—Å–≤–æ–±–æ–¥–∏–ª –æ—á–µ—Ä–µ–¥—å. (–æ—Å—Ç–∞–ª–æ—Å—å: \(activeReaders))")
    }
}

// MARK: - Constants

enum Constants {
    /// –í—Ä–µ–º—è —Å–∏–º—É–ª—è—Ü–∏–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    static let simTime: TimeInterval = 30
    /// –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    static let requestInterval = CGFloat.random(in: 0.5...1.5)
    /// –ß–∏—Å–ª–æ —è–¥–µ—Ä
    static let codesCapacity = 8
    /// –ß–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    static let numbersOfUsers = 50
    /// –í—Ä–µ–º—è –ø–∞—É–∑—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    static let pauseTime = 0.5
    /// –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ
    static let readTime = CGFloat.random(in: 1...2.5)
    /// –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ –∑–∞–ø–∏—Å—å
    static let writeTime = CGFloat.random(in: 3...5)
}
